# Rule order to get pre-defined databases first instead of trying to create it customized
ruleorder: preconfigdb_check > 
			clark_db_custom_check >
			dudes_db_custom_check >
			kaiju_db_custom_check >
			kraken_db_custom_check
ruleorder: preconfigdb_unpack > database_profile

rule preconfigdb_download:
	output: temp(config['dbdir'] + "{preconfigdb}/{tool}.tar.gz")
	log: config['dbdir'] + "{preconfigdb}/log/{tool}_db_{preconfigdb}_download.log"
	benchmark: config['dbdir'] + "{preconfigdb}/log/{tool}_db_{preconfigdb}_download.time"
	params: url = lambda wildcards: config[wildcards.preconfigdb][wildcards.tool] # Get URL for the database
	run:
		shell(download((params.url), output[0]) + " > {log} 2>&1")

rule preconfigdb_unpack:
	input: config['dbdir'] + "{preconfigdb}/{tool}.tar.gz"
	output: db_folder = config['dbdir'] + "{preconfigdb}/{tool}_db/",
		db_profile = config['dbdir'] + "{preconfigdb}/{tool}.dbprofile.out"
	log: config['dbdir'] + "{preconfigdb}/log/{tool}_db_{preconfigdb}_unpack.log"
	benchmark: config['dbdir'] + "{preconfigdb}/log/{tool}_db_{preconfigdb}_unpack.time"
	shell: 
		"""
		tar zxfv {input} -C {config[dbdir]}{wildcards.preconfigdb}/ > {log} 2>&1
		"""

rule preconfigdb_check:
	input: lambda wildcards: [config["dbdir"] + preconfigdb + "/" + wildcards.tool + "_db/" for preconfigdb in config["preconfigdbs"] if preconfigdb in config["databases"]],
 			lambda wildcards: [config["dbdir"] + preconfigdb + "/" + wildcards.tool + ".dbprofile.out" for preconfigdb in config["preconfigdbs"] if preconfigdb in config["databases"]]
	output:	db_check = touch(config['dbdir'] + "{preconfigdb}/{tool}_db_check.done")


acc2tab_path=srcdir("acc2tab.bash")
tab2count_path=srcdir("tab2count.bash")
rule database_profile:
	input: db_accession = config["dbdir"] + "{database}/{tool}.dbaccession.out"
	output: db_tax=temp(config["dbdir"] + "{database}/{tool}.dbtax.out"),
			db_profile=config["dbdir"] + "{database}/{tool}.dbprofile.out"
	log: config["dbdir"] + "{database}/log/{tool}_database_profile.log"
	benchmark: config["dbdir"] + "{database}/log/{tool}_database_profile.time"
	threads: config["threads"]
	shell:
		"""
		cat {input.db_accession} | xargs --max-procs={threads} -I '{{}}' bash {acc2tab_path} '{{}}' > {output.db_tax} 2> {log}
		{tab2count_path} {output.db_tax} > {output.db_profile} 2>> {log}
		"""