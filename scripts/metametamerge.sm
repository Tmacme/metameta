def target_clean_files(wildcards):
	if wildcards.database in preconfigdbs:
		return [wildcards.sample + "/profiles/" + wildcards.database + "/" + tool + "_clean_files.done" for tool in preconfigdbs[wildcards.database] if tool in config["tools"]]
	elif wildcards.database in customdbs:
		return [wildcards.sample + "/profiles/" + wildcards.database + "/" + tool + "_clean_files.done" for tool in customdbs[wildcards.database] if tool in config["tools"]]
		
def target_tools(wildcards):
	if wildcards.database in preconfigdbs:
		return [tool for tool in preconfigdbs[wildcards.database] if tool in config["tools"]]
	elif wildcards.database in customdbs:
		return [tool for tool in customdbs[wildcards.database] if tool in config["tools"]]
		
rule metametamerge_get_taxdump:
	output: taxdump=temp(config["dbdir"] + "taxdump.tar.gz")
			, names=config["dbdir"] + "names.dmp"
			, nodes=config["dbdir"] + "nodes.dmp"
			, merged=config["dbdir"] + "merged.dmp"
	log: config["dbdir"] + "log/metametamerge_get_taxdump.log"
	benchmark: config["dbdir"] + "log/metametamerge_get_taxdump.time"
	run:
		shell(download("ftp://ftp.ncbi.nih.gov/pub/taxonomy/taxdump.tar.gz", output.taxdump) + " > {log} 2>&1")
		shell("tar -zxvf {output.taxdump} -C {config[dbdir]} names.dmp nodes.dmp merged.dmp >> {log} 2>&1")

rule metametamerge:
	input:  
		clean_files = target_clean_files, ## TARGET TOOLS
		names=config["dbdir"] + "names.dmp", nodes=config["dbdir"] + "nodes.dmp", merged=config["dbdir"] + "merged.dmp"
	output: final_profile = "{sample}/metametamerge/{database}/final.metametamerge.profile.out"
	log: "{sample}/log/{database}/metametamerge.log"
	benchmark: "{sample}/log/{database}/metametamerge.time"
	params: tool_profiles = lambda wildcards: [wildcards.sample + "/profiles/" + wildcards.database + "/" + tool + ".profile.out" for tool in target_tools(wildcards)],
			db_profiles = lambda wildcards: [config["dbdir"] + wildcards.database + "/" + tool + ".dbprofile.out" for tool in target_tools(wildcards)],
			tool_identifier=lambda wildcards: ','.join([tool for tool in target_tools(wildcards)]),	
			tool_method=lambda wildcards: ','.join([tool for tool in target_tools(wildcards)]),
			detailed = "--detailed" if config["detailed"] else "",
			verbose = "--verbose" if config["verbose"] else ""
	conda: srcdir("../envs/metametamerge.yaml")
	shell: "{config[tool_alt_path][metametamerge]}MetaMetaMerge.py --input-files {params.tool_profiles} --database-profiles {params.db_profiles} --tool-identifier '{params.tool_identifier}' --tool-method '{params.tool_method}' --names-file {input.names} --nodes-file {input.nodes} --merged-file {input.merged} --bins {config[bins]} --cutoff {config[cutoff]} --mode '{config[mode]}' --ranks '{config[ranks]}' --output-file {output.final_profile} {params.detailed} {params.verbose} --output-parsed-profiles > {log} 2>&1"
