import os
subsample_path=srcdir("randomReadSubSample.py")
gz = ".gz" if config["gzipped"] else ""

rule trim_reads:
	# from sample to real read file names 
	# Just retrieve fq1 and check on the rule if there's a pair
	input: fq1 = lambda wildcards: os.path.abspath(config["samples"][wildcards.sample]["fq1"])
	output: fq1="{sample}/reads/pre1.1.fq"+gz
	log: "{sample}/log/trim_reads.log"
	benchmark: "{sample}/log/trim_reads.time"
	threads: config["threads"]
	conda: srcdir("../envs/trimmomatic.yaml")
	params: 
		input_fq2 = lambda wildcards: os.path.abspath(config["samples"][wildcards.sample]["fq2"]) if "fq2" in config["samples"][wildcards.sample] else "",
		output_fq2 = lambda wildcards: wildcards.sample + "/reads/pre1.2.fq"+gz
	shell:
		"""
		if [ "{config[trimming]}" != "0" ]; then
			if [ ! -z "{params.input_fq2}" ]; then
				{config[tool_alt_path][trimmomatic]}trimmomatic PE -threads {threads} {input.fq1} {params.input_fq2} {output.fq1} {wildcards.sample}/reads/unpaired.1.fq{gz} {params.output_fq2} {wildcards.sample}/reads/unpaired.2.fq{gz} AVGQUAL:2 LEADING:3 TRAILING:3 MAXINFO:{config[desiredminlen]}:{config[strictness]} > {log} 2>&1
				rm -rfv {wildcards.sample}/reads/unpaired.1.fq{gz} {wildcards.sample}/reads/unpaired.2.fq{gz} >> {log} 2>&1
			else
				{config[tool_alt_path][trimmomatic]}trimmomatic SE -threads {threads} {input.fq1} {output.fq1} AVGQUAL:2 LEADING:3 TRAILING:3 MAXINFO:{config[desiredminlen]}:{config[strictness]} > {log} 2>&1
			fi
		else
			ln -sfv {input.fq1} {output.fq1} > {log} 2>&1
			if [ ! -z "{params.input_fq2}" ]; then
				ln -sfv {params.input_fq2} {params.output_fq2} >> {log} 2>&1
			fi
		fi
		"""

rule errorcorr_reads:
	input: fq1="{sample}/reads/pre1.1.fq"+gz
	output: fq1="{sample}/reads/pre2.1.fq"+gz
	log: "{sample}/log/errorcorr_reads.log"
	benchmark: "{sample}/log/errorcorr_reads.time"
	threads: config["threads"]
	conda: srcdir("../envs/spades.yaml")
	params: 
		input_fq2 = lambda wildcards: wildcards.sample + "/reads/pre1.2.fq"+gz if "fq2" in config["samples"][wildcards.sample] else "",
		output_fq2 = lambda wildcards: wildcards.sample + "/reads/pre2.2.fq"+gz,
		errorcorr_gz = " --disable-gzip-output " if not gz else "",
		ext_spades = ".fq" if gz else ""
	shell:
		"""
		if [ "{config[errorcorr]}" != "0" ]; then
			if [ ! -z "{params.input_fq2}" ]; then
				{config[tool_alt_path][spades]}spades.py -1 {input.fq1} -2 {params.input_fq2} --only-error-correction --meta -o {wildcards.sample}/reads/spades/ -t {threads} {params.errorcorr_gz} > {log} 2>&1
				mv -v {wildcards.sample}/reads/spades/corrected/pre1.2{params.ext_spades}.00.0_0.cor.fastq{gz} {params.output_fq2} >> {log} 2>&1
			else
				{config[tool_alt_path][spades]}spades.py -s {input.fq1} --only-error-correction --meta -o {wildcards.sample}/reads/spades/ -t {threads} {params.errorcorr_gz} > {log} 2>&1
			fi
			mv -v {wildcards.sample}/reads/spades/corrected/pre1.1{params.ext_spades}.00.0_0.cor.fastq{gz} {output.fq1} >> {log} 2>&1
			rm -rfv {wildcards.sample}/reads/spades/ >> {log} 2>&1
		else
			ln -sfv `readlink -f {input.fq1}` {output.fq1} > {log} 2>&1
			if [ ! -z "{params.input_fq2}" ]; then
				ln -sfv `readlink -f {params.input_fq2}` {params.output_fq2} >> {log} 2>&1
			fi
		fi
		"""

rule subsample_reads:
	input: fq1="{sample}/reads/pre2.1.fq"+gz
	output:expand("{{sample}}/reads/{tool}.1.fq", tool=config["tools"]) # Always outputs ungziped files
	log: "{sample}/log/subsample_reads.log"
	benchmark: "{sample}/log/subsample_reads.time"
	params: input_fq2 = lambda wildcards: wildcards.sample + "/reads/pre2.2.fq"+gz if "fq2" in config["samples"][wildcards.sample] else ""	
	run:
		if config["subsample"]:
			if params.input_fq2:
				shell("python3 {subsample_path} -f1 {input.fq1} -f2 {params.input_fq2} --sample-size " + str(config["samplesize"]) + " --sample-number " + str(len(config["tools"])) + " --replacement " + str(config["replacement"]) + " --gzip 0 --output-prefix {wildcards.sample}/reads/pre3 > {log} 2>&1")
			else:
				shell("python3 {subsample_path} -f {input.fq1} --sample-size " + str(config["samplesize"]) + " --sample-number " + str(len(config["tools"])) + " --replacement " + str(config["replacement"]) + " --gzip 0 --output-prefix {wildcards.sample}/reads/pre3 > {log} 2>&1")
			for i,t in enumerate(config["tools"]):
				if params.input_fq2:
					shell("mv -v {wildcards.sample}/reads/pre3_"+str(i)+".1.fq {wildcards.sample}/reads/"+t+".1.fq >> {log} 2>&1")
					shell("mv -v {wildcards.sample}/reads/pre3_"+str(i)+".2.fq {wildcards.sample}/reads/"+t+".2.fq >> {log} 2>&1")
				else:
					shell("mv -v {wildcards.sample}/reads/pre3_"+str(i)+".fq {wildcards.sample}/reads/"+t+".1.fq >> {log} 2>&1")
		
		else: #Create links
			# If no sub-sampling is requested, only single files are stored (_pp) and links are created to the tools
			if gz:
				shell("gzip -dc "+input.fq1+" > {wildcards.sample}/reads/pp.1.fq 2> {log} ")
			else:	
				shell("ln -sfv `readlink -f "+input.fq1+"` {wildcards.sample}/reads/pp.1.fq > {log} 2>&1")
			
			if params.input_fq2:
				if gz:# ungzip
					shell("gzip -dc "+params.input_fq2+" > {wildcards.sample}/reads/pp.2.fq 2>> {log}")
				else:
					shell("ln -sfv `readlink -f "+params.input_fq2+"` {wildcards.sample}/reads/pp.2.fq >> {log} 2>&1")

			# create links to each tool
			for t in config["tools"]:
				shell("ln -sfv `readlink -f {wildcards.sample}/reads/pp.1.fq` {wildcards.sample}/reads/"+t+".1.fq >> {log} 2>&1")
				if params.input_fq2: shell("ln -sfv `readlink -f {wildcards.sample}/reads/pp.2.fq` {wildcards.sample}/reads/"+t+".2.fq >> {log} 2>&1")
